import asyncio
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

import sqlite3
import aiohttp
import logging
import requests
import random
from dotenv import load_dotenv
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
button_registr = KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ")
button_exchange_rates = KeyboardButton(text="–ö—É—Ä—Å –≤–∞–ª—é—Ç")
button_tips = KeyboardButton(text="–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏")
button_finances = KeyboardButton(text="–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã")

keyboards = ReplyKeyboardMarkup(keyboard=[
    [button_registr, button_exchange_rates],
    [button_tips, button_finances]
    ], resize_keyboard=True)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('user.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    telegram_id INTEGER UNIQUE,
    name TEXT,
    category1 TEXT,
    category2 TEXT,
    category3 TEXT,
    expenses1 REAL,
    expenses2 REAL,
    expenses3 REAL
    )
''')
conn.commit()

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
class FinancesForm(StatesGroup):
    category1 = State()
    expenses1 = State()
    category2 = State()
    expenses2 = State()
    category3 = State()
    expenses3 = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –º–µ–Ω—é:', reply_markup=keyboards)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ')
async def registration(message: Message):
    telegram_id = message.from_user.id
    name = message.from_user.full_name
    cursor.execute('''SELECT * FROM users WHERE telegram_id = ?''', (telegram_id,))
    user = cursor.fetchone()
    if user:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    else:
        cursor.execute('''INSERT INTO users (telegram_id, name) VALUES (?, ?)''', (telegram_id, name))
        conn.commit()
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ö—É—Ä—Å –≤–∞–ª—é—Ç"
@dp.message(F.text == '–ö—É—Ä—Å –≤–∞–ª—é—Ç')
async def exchange_rates(message: Message):
    url = 'https://v6.exchangerate-api.com/v6/93f384604322ccdaceacb874/latest/USD'
    try:
        response = requests.get(url)
        data = response.json()
        if response.status_code != 200:
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç')
            return
        usd_to_rub = data['conversion_rates']['RUB']
        eur_to_usd = data['conversion_rates']['EUR']
        eur_to_rub = eur_to_usd * usd_to_rub
        await message.answer(f'–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é: {usd_to_rub:.2f}\n–ö—É—Ä—Å –µ–≤—Ä–æ –∫ —Ä—É–±–ª—é: {eur_to_rub:.2f}')
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏"
@dp.message(F.text == '–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏')
async def send_tips(message: Message):
    tips = [
        '–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –±—é–¥–∂–µ—Ç üìù\n–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å, –∫—É–¥–∞ —É—Ö–æ–¥—è—Ç –¥–µ–Ω—å–≥–∏.',
        '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–∫—Ü–∏—è–º–∏ –∏ —Å–∫–∏–¥–∫–∞–º–∏ üõí\n–ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∞–∫—Ü–∏—è–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–±—ç–∫.',
        '–ì–æ—Ç–æ–≤—å—Ç–µ –¥–æ–º–∞ üç≥\n–î–æ–º–∞—à–Ω—è—è –µ–¥–∞ –¥–µ—à–µ–≤–ª–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ, —á–µ–º –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã.',
        '–û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —á–∞—Å—Ç—å –¥–æ—Ö–æ–¥–∞ üí∞\n–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã 10% –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã.',
        '–ü–æ–∫—É–ø–∞–π—Ç–µ –±/—É –≤–µ—â–∏ üëïüì±\n–ú–Ω–æ–≥–∏–µ –≤–µ—â–∏ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å —Ä—É–∫.',
    ]
    tip = random.choice(tips)
    await message.answer(tip)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã"
@dp.message(F.text == '–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã')
async def send_finances(message: Message, state: FSMContext):
    await state.set_state(FinancesForm.category1)
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:')

@dp.message(FinancesForm.category1)
async def send_finances(message: Message, state: FSMContext):
    await state.update_data(category1=message.text)
    await state.set_state(FinancesForm.expenses1)
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')

@dp.message(FinancesForm.expenses1)
async def send_finances(message: Message, state: FSMContext):
    await state.update_data(expenses1=float(message.text))
    await state.set_state(FinancesForm.category2)
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:')

@dp.message(FinancesForm.category2)
async def send_finances(message: Message, state: FSMContext):
    await state.update_data(category2=message.text)
    await state.set_state(FinancesForm.expenses2)
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')

@dp.message(FinancesForm.expenses2)
async def send_finances(message: Message, state: FSMContext):
    await state.update_data(expenses2=float(message.text))
    await state.set_state(FinancesForm.category3)
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:')

@dp.message(FinancesForm.category3)
async def send_finances(message: Message, state: FSMContext):
    await state.update_data(category3=message.text)
    await state.set_state(FinancesForm.expenses3)
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')

@dp.message(FinancesForm.expenses3)
async def send_finances(message: Message, state: FSMContext):
    await state.update_data(expenses3=float(message.text))
    data = await state.get_data()
    telegram_id = message.from_user.id
    cursor.execute('''UPDATE users SET category1 = ?, expenses1 = ?, category2 = ?, expenses2 = ?, category3 = ?, expenses3 = ? WHERE telegram_id = ?''',
                   (data['category1'], data['expenses1'], data['category2'], data['expenses2'], data['category3'], float(message.text), telegram_id))
    conn.commit()
    await state.clear()
    await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–∞—Å—Ö–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
